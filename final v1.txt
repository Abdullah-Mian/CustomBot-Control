import 'package:custombot_control/action_button.dart';
import 'package:custombot_control/classic_joystick.dart';
import 'package:custombot_control/minimal_joystick.dart';
import 'package:custombot_control/modern_joystick.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:io';
import 'package:network_info_plus/network_info_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.landscapeLeft,
    DeviceOrientation.landscapeRight,
  ]).then((_) {
    runApp(const MyApp());
  });
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Robot Controller',
      theme: ThemeData.dark().copyWith(
        primaryColor: Colors.blue,
        scaffoldBackgroundColor: const Color(0xFF121212),
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFF1E1E1E),
          elevation: 0,
        ),
      ),
      home: const ControllerScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class ControllerScreen extends StatefulWidget {
  const ControllerScreen({super.key});

  @override
  State<ControllerScreen> createState() => _ControllerScreenState();
}

class _ControllerScreenState extends State<ControllerScreen> 
    with SingleTickerProviderStateMixin {
  String ipAddress = 'Loading...';
  bool isConnected = false;
  bool isServerActive = true;
  ServerSocket? server;
  final int port = 5000;
  List<Socket> clients = [];
  Socket? activeClient;
  late AnimationController _controllerIconController;
  int selectedJoystickStyle = 0;
  
  Map<String, String> buttonChars = {
    'forward': 'W',
    'backward': 'S',
    'left': 'A',
    'right': 'D',
    'action1': 'X',
    'action2': 'Y',
  };

  final List<Widget Function(BuildContext, Map<String, Function>)> joystickStyles = [
    (context, callbacks) => ClassicJoystick(callbacks: callbacks),
    (context, callbacks) => ModernJoystick(callbacks: callbacks),
    (context, callbacks) => MinimalJoystick(callbacks: callbacks),
  ];

  @override
  void initState() {
    super.initState();
    _controllerIconController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);
    
    initializeServer();
    getIPAddress();
    loadSettings();
  }

  Future<void> getIPAddress() async {
    if (!isServerActive) {
      setState(() {
        ipAddress = '';
      });
      return;
    }
    
    try {
      final info = NetworkInfo();
      final wifiIp = await info.getWifiIP();
      setState(() {
        ipAddress = wifiIp != null ? '$wifiIp:$port' : 'Not found';
      });
    } catch (e) {
      setState(() {
        ipAddress = 'Error getting IP';
      });
    }
  }

  Future<void> initializeServer() async {
    if (!isServerActive) return;
    
    try {
      server = await ServerSocket.bind(InternetAddress.anyIPv4, port);
      server!.listen(
        (Socket client) {
          setState(() {
            clients.add(client);
            isConnected = true;
            activeClient = client;
            _controllerIconController.stop();
          });

          client.done.then((_) => handleDisconnection(client));
          client.handleError((_) => handleDisconnection(client));
        },
        onError: (e) {
          setState(() {
            isConnected = false;
            _controllerIconController.repeat(reverse: true);
          });
        },
      );
    } catch (e) {
      setState(() {
        isConnected = false;
        _controllerIconController.repeat(reverse: true);
      });
    }
  }

  void handleDisconnection(Socket client) {
    if (!mounted) return;
    setState(() {
      clients.remove(client);
      if (clients.isEmpty) {
        isConnected = false;
        _controllerIconController.repeat(reverse: true);
      }
    });
    client.close();
  }

  void toggleServer() {
    setState(() {
      isServerActive = !isServerActive;
      if (!isServerActive) {
        server?.close();
        for (var client in clients) {
          client.close();
        }
        clients.clear();
        isConnected = false;
        ipAddress = '';
        _controllerIconController.stop();
      } else {
        initializeServer();
        getIPAddress();
        _controllerIconController.repeat(reverse: true);
      }
    });
  }

  void showJoystickSelector() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Select Joystick Style'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: List.generate(
              joystickStyles.length,
              (index) => ListTile(
                leading: Radio<int>(
                  value: index,
                  groupValue: selectedJoystickStyle,
                  onChanged: (value) {
                    setState(() {
                      selectedJoystickStyle = value!;
                      Navigator.pop(context);
                    });
                  },
                ),
                title: Text('Style ${index + 1}'),
              ),
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            if (isServerActive) ...[
              Text(ipAddress),
              const SizedBox(width: 10),
              FadeTransition(
                opacity: _controllerIconController,
                child: const Icon(Icons.gamepad, size: 24),
              ),
            ],
          ],
        ),
        centerTitle: true,
      ),
      body: Stack(
        children: [
          // Left side controls
          Positioned(
            left: 20,
            top: 20,
            child: Column(
              children: [
                Switch(
                  value: isServerActive,
                  onChanged: (value) => toggleServer(),
                ),
                const SizedBox(height: 10),
                IconButton(
                  icon: const Icon(Icons.settings),
                  onPressed: () => showSettingsDialog(context),
                ),
                const SizedBox(height: 10),
                IconButton(
                  icon: const Icon(Icons.gamepad),
                  onPressed: showJoystickSelector,
                ),
              ],
            ),
          ),
          
          // Main controller area
          Center(
            child: joystickStyles[selectedJoystickStyle](
              context,
              {
                'onForward': () => sendCharacter(buttonChars['forward']!),
                'onBackward': () => sendCharacter(buttonChars['backward']!),
                'onLeft': () => sendCharacter(buttonChars['left']!),
                'onRight': () => sendCharacter(buttonChars['right']!),
                'onRelease': () => sendCharacter('S'),
              },
            ),
          ),
          
          // Right side action buttons
          Positioned(
            right: 20,
            bottom: 20,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                ActionButton(
                  label: 'X',
                  color: Colors.green,
                  onPressed: () => sendCharacter(buttonChars['action1']!),
                ),
                const SizedBox(height: 10),
                ActionButton(
                  label: 'Y',
                  color: Colors.blue,
                  onPressed: () => sendCharacter(buttonChars['action2']!),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void sendCharacter(String character) {
    if (isConnected && activeClient != null) {
      activeClient!.write(character);
    }
  }

  @override
  void dispose() {
    _controllerIconController.dispose();
    server?.close();
    for (var client in clients) {
      client.close();
    }
    super.dispose();
  }
}

void showSettingsDialog(BuildContext context) {
  showDialog(
    context: context, // error can be solved by passing context as a parameter or by using a global key or by using a state management solution
    builder: (context) => AlertDialog(
      title: const Text(
        'Controller Settings',
        style: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.bold,
        ),
      ),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildSettingField('Forward', 'forward'),
            _buildSettingField('Backward', 'backward'),
            _buildSettingField('Left', 'left'),
            _buildSettingField('Right', 'right'),
            _buildSettingField('Action X', 'action1'),
            _buildSettingField('Action Y', 'action2'),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text(
            'Close',
            style: TextStyle(fontSize: 16),
          ),
        ),
      ],
    ),
  );
}

Widget _buildSettingField(String label, String key) {
  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8.0),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: const TextStyle(fontSize: 16),
        ),
        SizedBox(
          width: 60,
          child: TextField(
            controller: TextEditingController(text: buttonChars[key]), //error can be solved by passing buttonChars as a parameter or by using a global key or by using a state management solution
            maxLength: 1,
            textAlign: TextAlign.center,
            style: const TextStyle(fontSize: 16),
            decoration: InputDecoration(
              counterText: '',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              contentPadding: const EdgeInsets.symmetric(
                horizontal: 8,
                vertical: 8,
              ),
            ),
            onChanged: (value) async {
              if (value.isNotEmpty) {
                final prefs = await SharedPreferences.getInstance();
                await prefs.setString(key, value.toUpperCase());
                setState(() { // error: setState is not defined
                  buttonChars[key] = value.toUpperCase(); //error: buttonChars is not defined
                });
              }
            },
          ),
        ),
      ],
    ),
  );
}

Future<void> loadSettings() async {
  final prefs = await SharedPreferences.getInstance();
  setState(() { //error: setState is not defined
    buttonChars = { //error: buttonChars is not defined
      'forward': prefs.getString('forward')?.toUpperCase() ?? 'W',
      'backward': prefs.getString('backward')?.toUpperCase() ?? 'S',
      'left': prefs.getString('left')?.toUpperCase() ?? 'A',
      'right': prefs.getString('right')?.toUpperCase() ?? 'D',
      'action1': prefs.getString('action1')?.toUpperCase() ?? 'X',
      'action2': prefs.getString('action2')?.toUpperCase() ?? 'Y',
    };
    selectedJoystickStyle = prefs.getInt('joystickStyle') ?? 0;//error: selectedJoystickStyle is not defined
  });
}

Future<void> saveJoystickStyle(int style) async {
  final prefs = await SharedPreferences.getInstance();
  await prefs.setInt('joystickStyle', style);
}